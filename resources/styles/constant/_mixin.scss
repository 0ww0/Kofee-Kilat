@use "sass:math";
@use "sass:meta";
@use "sass:color";

@mixin pseudo($display: block, $pos: absolute, $content: "") {
    content: $content;
    display: $display;
    position: $pos;
}

@mixin responsive-ratio($x, $y, $pseudo: true) {
    $padding: unquote(math.div($y, $x) * 100 + "%");

    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);

            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

@mixin responsive-padding($x, $y, $pseudo: true) {
    $padding: unquote(math.div($y, $x) * (100 * 0.5) + "%");

    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);

            width: 100%;
            padding-top: $padding;
        }

        &:after {
            @include pseudo($pos: relative);

            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

@mixin media($media) {
    @if $media == xs-dn {
        @media ($max: $xs) {
            @content;
        }
    } @else if $media == xs-up {
        @media ($min: calc($xs + 1px)) {
            @content;
        }
    } @else if $media == sm-dn {
        @media ($max: $sm) {
            @content;
        }
    } @else if $media == sm-up {
        @media ($min: calc($sm + 1px)) {
            @content;
        }
    } @else if $media == md-dn {
        @media ($max: $md) {
            @content;
        }
    } @else if $media == md-up {
        @media ($min: calc($md + 1px)) {
            @content;
        }
    } @else if $media == dp-dn {
        @media ($max: $dp) {
            @content;
        }
    } @else if $media == dp-up {
        @media ($min: calc($dp + 1px)) {
            @content;
        }
    } @else if $media == hd-dn {
        @media ($max: $hd) {
            @content;
        }
    } @else if $media == hd-up {
        @media ($min: calc($hd + 1px)) {
            @content;
        }
    } @else if $media == xs-sm {
        @media ($max: $sm) and ($min: $xs) {
            @content;
        }
    } @else if $media == xs-md {
        @media ($max: $md) and ($min: $xs) {
            @content;
        }
    } @else if $media == xs-dp {
        @media ($max: $dp) and ($min: $xs) {
            @content;
        }
    } @else if $media == xs-hd {
        @media ($max: $hd) and ($min: $xs) {
            @content;
        }
    } @else if $media == sm-md {
        @media ($max: $md) and ($min: $sm) {
            @content;
        }
    } @else if $media == sm-dp {
        @media ($max: $dp) and ($min: $sm) {
            @content;
        }
    } @else if $media == sm-hd {
        @media ($max: $hd) and ($min: $sm) {
            @content;
        }
    } @else if $media == md-dp {
        @media ($max: $dp) and ($min: $md) {
            @content;
        }
    } @else if $media == md-hd {
        @media ($max: $hd) and ($min: $md) {
            @content;
        }
    } @else if $media == dp-hd {
        @media ($max: $hd) and ($min: $dp) {
            @content;
        }
    }
}

@mixin clearfix {
    &:after {
        content: "";
        clear: both;
        display: table;
    }
}

@mixin z($num) {
    z-index: $num;
}

@mixin trans($property...) {
    transition-property: $property;
}

$browser-context: 16;

@function em($pixels, $context: $browser-context) {
    @return #{math.div($pixels, $context)}em;
}

@function rem($pixels, $context: $browser-context) {
    @return #{math.div($pixels, $context)}rem;
}

@mixin width($width, $containerWidth) {
    width: #{math.div($width, $containerWidth) * 100%};
}

@mixin ellipsis($width: 100%, $display: inline-block) {
    display: $display;
    max-width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
}

@mixin hideText {
    overflow: hidden;
    text-indent: 101%;
    white-space: nowrap;
}

@mixin background($color, $opacity: 1) {
    background-color: rgba($color, $opacity);
}

@mixin color($color, $opacity: 1) {
    color: rgba($color, $opacity);
}

@mixin border($color, $opacity: 1) {
    border-color: rgba($color, $opacity);
}

@mixin button-mixed($bg, $c, $b, $o: 1) {
    @include background($bg, $o);
    @include color($c, $o);
    @include border($b, $o);
}

@mixin button($c1, $c2, $o: 1) {
    @include background($c1, $o);
    @include color($c2, $o);
    @include border($c1, $o);
}

@mixin background-property(
    $repeat: no-repeat,
    $size: cover,
    $position: center
) {
    background-repeat: $repeat;
    background-size: $size;
    background-position: $position;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        box-shadow: inset $top $left $blur $color;
    } @else {
        box-shadow: $top $left $blur $color;
    }
}

@mixin rounded($radius: 0.5em) {
    border-radius: $radius;
}

@mixin gradient($color, $white: false, $deg: 145deg, $opacity: 1) {
    @if $white {
        background-color: rgba($color, $opacity);
        background-image: linear-gradient(
            $deg,
            rgba($white, 0),
            rgba($white, 0.25)
        );
    } @else {
        background-color: rgba($color, $opacity);
        background-image: linear-gradient(
            $deg,
            rgba($black, 0),
            rgba($black, 0.25)
        );
    }
}

@mixin weight($weight) {
    font-weight: $weight;
}

@mixin flex($axis, $flow: nowrap) {
    display: flex;
    flex-flow: $axis $flow;
    flex-direction: $axis;
}

@function rand($min, $max) {
    @return unquote($min + math.floor(random() * (($max - $min) + 1)) + "%");
}

@mixin neustyle(
    $color,
    $hover: false,
    $direction: topleft,
    $inset: false,
    $distance: 2px
) {
    $v: 2px;

    @if $distance {
        $v: $distance;
    }

    $topX: ($v * 2 * -1);
    $topY: ($v * 2 * -1);

    @if $direction == "topcenter" {
        $topX: 0px;
        $topY: ($v * 2 * -1);
    }
    @if $direction == "topright" {
        $topX: ($v * 2);
        $topY: ($v * 2 * -1);
    }

    $out: $topX $topY ($v * 3) rgba(#fff, 0.7),
        $topX * -1 $topY * -1 ($v * 3) darken($color, 12),
        inset $topX $topY ($v * 6) rgba(#fff, 0.1),
        inset $topX * -1 $topY * -1 ($v * 6) darken($color, 0);

    $in: $topX $topY ($v * 5) rgba(#fff, 0.2),
        $topX * -1 $topY * -1 ($v * 3) darken($color, 0),
        inset $topX $topY ($v * 6) rgba(#fff, 0.6),
        inset math.div($topX, 2) math.div($topY, 2) ($v) rgba(#fff, 0.2),
        inset $topX * -1 $topY * -1 ($v * 3) darken($color, 10);

    @if $inset {
        box-shadow: $in;
    } @else {
        box-shadow: $out;
    }

    @if $hover {
        &:hover {
            @if $inset {
                box-shadow: $out;
            } @else {
                box-shadow: $in;
            }
        }
    }
}
